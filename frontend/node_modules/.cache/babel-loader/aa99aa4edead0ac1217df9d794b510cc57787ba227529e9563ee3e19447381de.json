{"ast":null,"code":"var _jsxFileName = \"/Users/sh.zviadauri/Sites/React-Node-Project/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { login, register } from '../services/api'; // საჭიროა სწორად იმპორტირება\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // const loginUser = async (email, password) => {\n  //     try {\n  //         const data = await login(email, password);\n  //         setUser(data); // შეგიძლიათ მნიშვნელობად დაუშვათ JWT Token-ი\n  //         localStorage.setItem('user', JSON.stringify(data));\n  //     } catch (error) {\n  //         console.error('Login failed:', error);\n  //     }\n  // };\n\n  const loginUser = async (email, password) => {\n    try {\n      const data = await login(email, password);\n      console.log(data);\n      if (data.token) {\n        localStorage.setItem('token', response.data.token); // Save JWT token\n        setUser(response.data.user);\n        setIsAuthenticated(true);\n      } else {\n        console.error('No token returned from server');\n      }\n    } catch (error) {\n      var _error$response;\n      console.error('Error logging in:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      setIsAuthenticated(false);\n    }\n  };\n  const registerUser = async (name, email, password) => {\n    try {\n      const data = await register(name, email, password);\n      setUser(data); // რეგისტრაციის შემდეგ შეიძლება, დავაბრუნოთ JWT\n      localStorage.setItem('user', JSON.stringify(data));\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      registerUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","login","register","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loginUser","email","password","data","console","log","token","localStorage","setItem","response","setIsAuthenticated","error","_error$response","message","registerUser","name","JSON","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sh.zviadauri/Sites/React-Node-Project/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState } from 'react';\nimport { login, register } from '../services/api'; // საჭიროა სწორად იმპორტირება\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n\n    // const loginUser = async (email, password) => {\n    //     try {\n    //         const data = await login(email, password);\n    //         setUser(data); // შეგიძლიათ მნიშვნელობად დაუშვათ JWT Token-ი\n    //         localStorage.setItem('user', JSON.stringify(data));\n    //     } catch (error) {\n    //         console.error('Login failed:', error);\n    //     }\n    // };\n\n    const loginUser = async (email, password) => {\n        try {\n            const data = await login(email, password);\n            \n            console.log(data);\n\n            if (data.token) {\n                localStorage.setItem('token', response.data.token); // Save JWT token\n                setUser(response.data.user);\n                setIsAuthenticated(true);\n            } else {\n                console.error('No token returned from server');\n            }\n        } catch (error) {\n            console.error('Error logging in:', error.response?.data || error.message);\n            setIsAuthenticated(false);\n        }\n    };\n\n    const registerUser = async (name, email, password) => {\n        try {\n            const data = await register(name, email, password);\n            setUser(data); // რეგისტრაციის შემდეგ შეიძლება, დავაბრუნოთ JWT\n            localStorage.setItem('user', JSON.stringify(data));\n        } catch (error) {\n            console.error('Registration failed:', error);\n        }\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, loginUser, registerUser }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,KAAK,EAAEC,QAAQ,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMW,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACzC,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMb,KAAK,CAACW,KAAK,EAAEC,QAAQ,CAAC;MAEzCE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MAEjB,IAAIA,IAAI,CAACG,KAAK,EAAE;QACZC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,QAAQ,CAACN,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;QACpDP,OAAO,CAACU,QAAQ,CAACN,IAAI,CAACL,IAAI,CAAC;QAC3BY,kBAAkB,CAAC,IAAI,CAAC;MAC5B,CAAC,MAAM;QACHN,OAAO,CAACO,KAAK,CAAC,+BAA+B,CAAC;MAClD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZR,OAAO,CAACO,KAAK,CAAC,mBAAmB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBT,IAAI,KAAIQ,KAAK,CAACE,OAAO,CAAC;MACzEH,kBAAkB,CAAC,KAAK,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMI,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEd,KAAK,EAAEC,QAAQ,KAAK;IAClD,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACwB,IAAI,EAAEd,KAAK,EAAEC,QAAQ,CAAC;MAClDH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;MACfI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEQ,IAAI,CAACC,SAAS,CAACd,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,oBACIlB,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAErB,IAAI;MAAEE,SAAS;MAAEc;IAAa,CAAE;IAAAlB,QAAA,EAC1DA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC1B,EAAA,CA/CWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}